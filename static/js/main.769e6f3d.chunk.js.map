{"version":3,"sources":["Components/TvShowInfo.js","App.js","serviceWorker.js","index.js"],"names":["TvShowInfo","react_default","a","createElement","className","src","this","props","img","alt","role","name","genre","map","item","i","key","showStart","concat","bio","rating","cast","length","member","person","image","medium","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","userInput","target","value","getTvData","preventDefault","url","state","axios","method","dataResponse","then","response","cleanSummary","data","summary","replace","original","genres","premiered","average","showId","id","getCastData","catch","error","Swal","fire","castUrl","responseCast","animateScrollTo","document","querySelector","action","htmlFor","type","placeholder","onChange","required","onClick","Components_TvShowInfo","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.769e6f3d.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass TvShowInfo extends Component {\n\n   render(){\n      return (\n         <div className=\"resultsComponent\">\n            <div className=\"resultsInfo\">\n               <div className=\"imageContainer\">\n                  <img src={this.props.img} alt=\"\" role=\"presentation\"/>\n               </div>\n               <div className=\"showInformation\">\n                  <h2 className=\"showTitle\">{this.props.name}</h2>\n\n                  {/* list all genres */}\n                  {this.props.genre.map((item, i)=>{\n                     return <h3 key={i} className=\"showGenre\">{item}</h3>\n                  })}\n\n                  {/* if there is a start date, show the info. if not, don't show anything */}\n                  <p className=\"showStartDate\">{this.props.showStart ? `First Aired: ${this.props.showStart}` : null}</p>\n\n                  <p className=\"showSummary\">{this.props.bio}</p>\n\n                  {/* if there is a rating, show the info. if not, don't show anything */}\n                  <p className=\"showRating\">{this.props.rating ? `Average rating: ${this.props.rating} / 10` : null}</p>\n               </div>\n            </div>\n\n            <div className=\"cast\">\n               {/* only add h2 if there is content on the cast on screen */}\n               {this.props.cast.length != 0 && <h2>Top Billed Cast</h2>}\n               {this.props.cast.map((member, cast) => {\n                  return (\n                     <div key={cast} className=\"castInformation\">\n                        <div className=\"castImage\">\n                           <img src={member.person.image.medium} alt=\"\" role=\"presentation\"/>\n                        </div>\n                        <div className=\"castName\">\n                           <p>{member.person.name}</p>\n                        </div>\n                     </div>\n                  )\n               })}\n            </div>\n         </div>\n      )\n   }\n}\n\nexport default TvShowInfo","import React, {Component} from 'react';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport animateScrollTo from 'animated-scroll-to';\nimport './App.css';\nimport TvShowInfo from './Components/TvShowInfo.js';\n\n// if using relative photos, have to import them in from the public folder\n// import imagename from 'path'; when using img src={imagename}\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    // Creates an initial state with an empty array for the shows\n    this.state = {\n      img: '',\n      name: '',\n      genre: [],\n      showStart: '',\n      bio: [],\n      rating: '',\n      showId: '',\n      userInput: '',\n      cast: [],\n      error: null\n    } // end of this.state\n  } // end of constructor\n\n  // handles change of text input field\n  handleChange = (event) => {\n    this.setState({\n      userInput: event.target.value,\n    })\n  } // end of handleChange\n\n\n  // on submit of the form/button, do the following:\n  getTvData = (event) => {\n\n    // prevent default function of form\n    event.preventDefault();\n\n    // create variable to save URL info\n    const url = `https://api.tvmaze.com/singlesearch/shows?q=${this.state.userInput}`;\n\n    // making the first API call to gather general show info\n    axios({\n      method: 'GET',\n      url: url,\n      dataResponse: 'json',\n\n      // Once the data has been retrieved(the then method), save it as response\n    }).then(response => {\n      // have the response only show the data value\n      response = response.data\n\n      // removing the element tags from the API's summary so it doesn't show for user\n      const cleanSummary = response.summary.replace(/<[^>]+>/g, ' ');\n\n      // have shows equal the response (which is equal to the data value only) and clear the userInput\n      this.setState({\n        img: response.image.original,\n        name: response.name,\n        genre: response.genres,\n        showStart: response.premiered,\n        bio: cleanSummary,\n        rating: response.rating.average,\n        showId: response.id,\n        userInput: ''\n\n        // ensuring that all items are returned before calling getCastData\n      }, () => {\n          this.getCastData();\n      }) // end of this.setState\n    }) // end of .then method\n\n    // ERROR HANDLING FOR A BLANK TEXT FIELD OR TEXT THAT DOESN'T MATCH A SHOW NAME FROM API\n    .catch((error) => {\n      Swal.fire(\"Please enter a valid TV Show title.\");\n    })\n\n  } // end of getTvData\n\n\n  // Second call to API to gather Cast name and photos\n  getCastData = () => {\n    const castUrl = `https://api.tvmaze.com/shows/${this.state.showId}/cast`;\n\n    axios({\n      method: 'GET',\n      url: castUrl,\n      dataResponse: 'json',\n    }).then(responseCast => {\n\n      this.setState({\n        cast: responseCast.data,\n      })\n    })\n\n    // Smooth scroll to results\n    animateScrollTo(document.querySelector('.resultsComponent'));\n    \n  } // end of getCastData\n  \n\n  // this is what will be built to the page:\n  render() {\n    return (\n      <div className=\"App wrapper\">\n        <header>\n          <h1>Know Your Show!</h1>\n          <h2>Enter your favourite TV Show title to learn more about it.</h2>\n        </header>\n      \n        <form action=\"submit\">\n          <label htmlFor=\"tvShowInput\" className=\"visuallyHidden\">Enter a TV Show name.</label>\n          <input type=\"text\" id=\"tvShowInput\" placeholder=\"Enter a title...\" onChange={this.handleChange} value={this.state.userInput} required/>\n          <button onClick={this.getTvData}>Tell me more about my show!</button>\n        </form>\n\n        <TvShowInfo\n          img={this.state.img}\n          name={this.state.name}\n          genre={this.state.genre}\n          showStart={this.state.showStart}\n          bio={this.state.bio}\n          rating={this.state.rating}\n\n          cast={this.state.cast}\n        />\n\n        <footer>\n          <p>Created by Christina Greene. Data sourced from <a href=\"https://www.tzmaze.com\">TVmaze</a>.</p>\n        </footer>\n      </div>\n    ); // end of return\n  } // end of render\n} // end of class App extending Component\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}